{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/Header.js","Components/CounterButton.js","containers/App.js","actions.js","constants.js","reducer.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","console","log","type","placeholder","onChange","Scroll","props","style","overflow","border","height","margin","children","Header","nextProps","nextState","Component","CounterButton","updateCount","setState","state","count","this","color","onClick","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","errorState","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e417100.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nconst Card = ({name, email, id}) => {\n\treturn (\n\t\t<div className = 'tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5' >\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt=\"avatar\" />\n\t\t\t<h2>{name}</h2>\n\t\t\t<p>{email}</p>\n\t\t</div>\n\t);\n};\n\nexport default Card;","import React from 'react';\nimport Card from './Card.js';\n\nconst CardList = ( {robots} ) => {\n    return (\n    <div>\n        {\n        robots.map((user,i) => \n        <Card \n            key={i} \n            id={user.id} \n            name={user.name} \n            email={user.email}\n        />\n        )}\n    </div>);\n};\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ( {searchChange} ) => {  \n    console.log('searchbox');\n    return (\n        <div>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder=\"type roboname here\"\n                onChange={searchChange}\n            />\n         </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', border: '2px solid black', height: '500px', margin: '10px'}}>\n            {props.children};\n        </div>\n    );\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n\n    render() {\n        console.log('header');\n        return <h1 className='f1'>Robofriends</h1>\n    }\n}\n\nexport default Header;","import React, {Component} from 'react';\n\nclass CounterButton extends Component {\n\n    constructor() {\n        super();\n        this.state={\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return true;\n    }\n\n    updateCount = () => {\n        this.setState(state => {\n            return {count: state.count + 1}\n        })\n    }\n\n    render() {\n        console.log('btn', this.props.color);\n        return (\n        <button color={this.props.color} onClick={this.updateCount}>count: {this.state.count}</button>\n        ) \n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox.js';\nimport './App.css';\nimport Scroll from '../Components/Scroll.js';\nimport Header from '../Components/Header';\nimport CounterButton from '../Components/CounterButton'\n\nimport {searchField, requestRobots} from '../actions.js';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearchChange: (event) => dispatch(searchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n\n    componentDidMount () {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter\n        ( \n            robot => {return robot.name.toLowerCase().includes(searchField.toLowerCase())}\n        );\n        return isPending ? \n            <h1>Loading</h1> :\n            (\n                <div className='tc'>\n                    <Header />\n                    <CounterButton color={'red'} />\n                    <SearchBox searchChange = {onSearchChange}/>\n                    <Scroll>\n                        <CardList robots = {filteredRobots} />\n                    </Scroll>\n                </div>\n            )   \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCHFIELD, \n    REQUEST_ROBOTS_FAILED, \n    REQUEST_ROBOTS_PENDING, \n    REQUEST_ROBOTS_SUCCESS\n} from './constants.js';\n\nexport const searchField = (text) => ({\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => dispatch({\n        type: REQUEST_ROBOTS_SUCCESS,\n        payload: users\n    }))\n    .catch(error => dispatch({\n        type: REQUEST_ROBOTS_FAILED,\n        payload: error\n    }))\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \n    CHANGE_SEARCHFIELD, \n    REQUEST_ROBOTS_FAILED, \n    REQUEST_ROBOTS_PENDING, \n    REQUEST_ROBOTS_SUCCESS \n} from './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true}); \n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {errorState: action.payload, isPending: false});\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App.js';\nimport { searchRobots, requestRobots } from './reducer';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\n// const logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}